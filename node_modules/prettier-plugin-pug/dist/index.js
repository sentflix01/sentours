"use strict";
exports.__esModule = true;
var prettier_1 = require("prettier");
var lex = require("pug-lexer");
var logger_1 = require("./logger");
var makeString = prettier_1.util.makeString;
var logger = logger_1.createLogger(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
function quotationType(code) {
    var indexOfSingleQuote = code.indexOf("'");
    var indexOfDoubleQuote = code.indexOf('"');
    logger.debug({ code: code, indexOfSingleQuote: indexOfSingleQuote, indexOfDoubleQuote: indexOfDoubleQuote });
    if (indexOfSingleQuote === -1 && indexOfDoubleQuote === -1) {
        return undefined;
    }
    else if (indexOfSingleQuote === -1 && indexOfDoubleQuote !== -1) {
        return 'DOUBLE';
    }
    else if (indexOfDoubleQuote === -1 && indexOfSingleQuote !== -1) {
        return 'SINGLE';
    }
    else if (indexOfSingleQuote < indexOfDoubleQuote) {
        return 'SINGLE';
    }
    else if (indexOfDoubleQuote < indexOfSingleQuote) {
        return 'DOUBLE';
    }
    return;
}
function previousNormalAttributeToken(tokens, index) {
    for (var i = index - 1; i > 0; i--) {
        var token = tokens[i];
        if (token.type === 'start-attributes') {
            return;
        }
        if (token.type === 'attribute') {
            if (token.name !== 'class' && token.name !== 'id') {
                return token;
            }
        }
    }
    return;
}
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade']
        }
    ],
    parsers: {
        pug: {
            parse: function (text, parsers, options) {
                logger.debug('[parsers:pug:parse]:', { text: text });
                var tokens = lex(text, {});
                return tokens;
            },
            astFormat: 'pug-ast',
            hasPragma: function (text) {
                return text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n');
            },
            locStart: function (node) {
                logger.debug('[parsers:pug:locStart]:', { node: node });
                return 0;
            },
            locEnd: function (node) {
                logger.debug('[parsers:pug:locEnd]:', { node: node });
                return 0;
            },
            preprocess: function (text, options) {
                logger.debug('[parsers:pug:preprocess]:', { text: text });
                return text;
            }
        }
    },
    printers: {
        'pug-ast': {
            print: function (path, _a, print) {
                var printWidth = _a.printWidth, singleQuote = _a.singleQuote, tabWidth = _a.tabWidth, useTabs = _a.useTabs;
                var tokens = path.stack[0];
                var result = '';
                var indentLevel = 0;
                var indent = ' '.repeat(tabWidth);
                if (useTabs) {
                    indent = '\t';
                }
                var pipelessText = false;
                var startTagPosition = 0;
                var startAttributePosition = 0;
                var previousAttributeRemapped = false;
                var wrapAttributes = false;
                for (var index = 0; index < tokens.length; index++) {
                    var token = tokens[index];
                    var previousToken = tokens[index - 1];
                    var nextToken = tokens[index + 1];
                    logger.debug('[printers:pug-ast:print]:', JSON.stringify(token));
                    switch (token.type) {
                        case 'tag':
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                    case 'outdent':
                                        result += indent.repeat(indentLevel);
                                        break;
                                    case 'indent':
                                        result += indent;
                                        break;
                                }
                            }
                            if (!(token.val === 'div' && (nextToken.type === 'class' || nextToken.type === 'id'))) {
                                result += token.val;
                            }
                            startTagPosition = result.length;
                            break;
                        case 'start-attributes':
                            if (nextToken && nextToken.type === 'attribute') {
                                previousAttributeRemapped = false;
                                startAttributePosition = result.length;
                                result += '(';
                                var start = result.lastIndexOf('\n') + 1;
                                var lineLength = result.substring(start).length;
                                logger.debug(lineLength, printWidth);
                                var tempToken = nextToken;
                                var tempIndex = index + 1;
                                while (tempToken.type === 'attribute') {
                                    lineLength += tempToken.name.length + 1 + tempToken.val.toString().length;
                                    logger.debug(lineLength, printWidth);
                                    tempToken = tokens[++tempIndex];
                                }
                                if (lineLength > printWidth) {
                                    wrapAttributes = true;
                                }
                            }
                            break;
                        case 'attribute':
                            if (token.name === 'class' &&
                                typeof token.val === 'string' &&
                                (token.val.startsWith('"') || token.val.startsWith("'"))) {
                                var val_1 = token.val;
                                val_1 = val_1.substring(1, val_1.length - 1);
                                val_1 = val_1.trim();
                                val_1 = val_1.replace(/\s\s+/g, ' ');
                                var classes = val_1.split(' ');
                                var specialClasses = [];
                                var validClassNameRegex = /^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/;
                                for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {
                                    var className = classes_1[_i];
                                    if (!validClassNameRegex.test(className)) {
                                        specialClasses.push(className);
                                        continue;
                                    }
                                    var position_1 = startAttributePosition;
                                    result = [result.slice(0, position_1), "." + className, result.slice(position_1)].join('');
                                    startAttributePosition += 1 + className.length;
                                }
                                if (specialClasses.length > 0) {
                                    token.val = makeString(specialClasses.join(' '), singleQuote ? "'" : '"', false);
                                    previousAttributeRemapped = false;
                                }
                                else {
                                    previousAttributeRemapped = true;
                                    break;
                                }
                            }
                            else if (token.name === 'id' &&
                                typeof token.val === 'string' &&
                                (token.val.startsWith('"') || token.val.startsWith("'"))) {
                                var val_2 = token.val;
                                val_2 = val_2.substring(1, val_2.length - 1);
                                val_2 = val_2.trim();
                                var position_2 = startTagPosition;
                                result = [result.slice(0, position_2), "#" + val_2, result.slice(position_2)].join('');
                                startAttributePosition += 1 + val_2.length;
                                result = result.replace(/div#/, '#');
                                if (previousToken.type === 'attribute' && previousToken.name !== 'class') {
                                    previousAttributeRemapped = true;
                                }
                                break;
                            }
                            var hasNormalPreviousToken = previousNormalAttributeToken(tokens, index);
                            if (previousToken &&
                                previousToken.type === 'attribute' &&
                                (!previousAttributeRemapped || hasNormalPreviousToken)) {
                                result += ',';
                                if (!wrapAttributes) {
                                    result += ' ';
                                }
                            }
                            previousAttributeRemapped = false;
                            if (wrapAttributes) {
                                result += '\n';
                                result += indent.repeat(indentLevel + 1);
                            }
                            result += "" + token.name;
                            if (typeof token.val === 'boolean') {
                                if (token.val !== true) {
                                    result += "=" + token.val;
                                }
                            }
                            else {
                                var val_3 = token.val;
                                if (token.name.startsWith(':') || token.name.startsWith('v-bind:')) {
                                    val_3 = val_3.trim();
                                    val_3 = val_3.replace(/\s\s+/g, ' ');
                                    val_3 = val_3.replace('[ {', '[{').replace('} ]', '}]');
                                    val_3 = val_3.replace('[ (', '[(').replace(') ]', ')]');
                                    val_3 = val_3.replace('[ ', '[').replace(' ]', ']');
                                    var type = quotationType(val_3);
                                    if ((type === 'SINGLE' && !singleQuote) || (type === 'DOUBLE' && singleQuote)) {
                                        val_3 = val_3.replace(/['"]/g, function (match) { return (match === '"' ? "'" : '"'); });
                                    }
                                }
                                else if (/^["'](.*)["']$/.test(val_3)) {
                                    val_3 = makeString(val_3.slice(1, -1), singleQuote ? "'" : '"', false);
                                }
                                else if (val_3 === 'true') {
                                    break;
                                }
                                else {
                                    val_3 = val_3.trim().replace(/\s\s+/g, ' ');
                                    if (val_3.startsWith('{ ')) {
                                        val_3 = "{" + val_3.substring(2, val_3.length);
                                    }
                                }
                                result += "=" + val_3;
                            }
                            break;
                        case 'end-attributes':
                            if (wrapAttributes) {
                                result += '\n';
                                result += indent.repeat(indentLevel);
                            }
                            wrapAttributes = false;
                            if (result.endsWith('(')) {
                                result = result.substring(0, result.length - 1);
                            }
                            else if (previousToken && previousToken.type === 'attribute') {
                                result += ')';
                            }
                            if (nextToken && (nextToken.type === 'text' || nextToken.type === 'path')) {
                                result += ' ';
                            }
                            break;
                        case 'indent':
                            result += '\n';
                            result += indent.repeat(indentLevel);
                            indentLevel++;
                            break;
                        case 'outdent':
                            if (previousToken && previousToken.type !== 'outdent') {
                                if (token.loc.start.line - previousToken.loc.end.line > 1) {
                                    result += '\n';
                                }
                                result += '\n';
                            }
                            indentLevel--;
                            break;
                        case 'class':
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                    case 'outdent':
                                        result += indent.repeat(indentLevel);
                                        break;
                                    case 'indent':
                                        result += indent;
                                        break;
                                }
                            }
                            result += "." + token.val;
                            if (nextToken && nextToken.type === 'text') {
                                result += ' ';
                            }
                            break;
                        case 'eos':
                            while (result.endsWith('\n')) {
                                result = result.substring(0, result.length - 1);
                            }
                            result += '\n';
                            break;
                        case 'comment':
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                    case 'outdent':
                                        result += indent.repeat(indentLevel);
                                        break;
                                    case 'indent':
                                        result += indent;
                                        break;
                                }
                            }
                            result += "//" + (token.buffer ? '' : '-') + token.val.replace(/\s\s+/g, ' ');
                            break;
                        case 'newline':
                            if (previousToken && token.loc.start.line - previousToken.loc.end.line > 1) {
                                result += '\n';
                            }
                            result += '\n';
                            break;
                        case 'text':
                            var val = token.val;
                            val = val.replace(/\s\s+/g, ' ');
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                        if (pipelessText === false) {
                                            result += indent.repeat(indentLevel);
                                            if (/^ .+$/.test(val)) {
                                                result += '|\n';
                                                result += indent.repeat(indentLevel);
                                            }
                                            result += '|';
                                            if (/.*\S.*/.test(token.val)) {
                                                result += ' ';
                                            }
                                        }
                                        else {
                                            result += indent.repeat(indentLevel);
                                            result += indent;
                                        }
                                        break;
                                    case 'indent':
                                        result += indent;
                                        result += '|';
                                        if (/.*\S.*/.test(token.val)) {
                                            result += ' ';
                                        }
                                        break;
                                    case 'start-pipeless-text':
                                        result += indent;
                                        break;
                                    case 'interpolated-code':
                                        if (/^ .+$/.test(val)) {
                                            result += ' ';
                                        }
                                        break;
                                }
                            }
                            var needsTrailingWhitespace = false;
                            if (nextToken && nextToken.type === 'interpolated-code' && val.endsWith(' ')) {
                                needsTrailingWhitespace = true;
                            }
                            val = val.trim();
                            if (val.startsWith('{{') && val.endsWith('}}')) {
                                var code = val.substring(2, val.length - 2);
                                code = code.trim();
                                var type = quotationType(code);
                                if ((type === 'SINGLE' && singleQuote) || (type === 'DOUBLE' && !singleQuote)) {
                                    val = '{{ ';
                                    val += code.replace(/['"]/g, function (match) { return (match === '"' ? "'" : '"'); });
                                    val += ' }}';
                                }
                            }
                            if (previousToken && (previousToken.type === 'tag' || previousToken.type === 'id')) {
                                val = " " + val;
                            }
                            result += val;
                            if (needsTrailingWhitespace) {
                                result += ' ';
                            }
                            break;
                        case 'interpolated-code':
                            if (previousToken && previousToken.type === 'tag') {
                                result += ' ';
                            }
                            result += "#{" + token.val + "}";
                            break;
                        case 'code':
                            if (indentLevel > 0) {
                                result += indent;
                            }
                            result += "- " + token.val;
                            break;
                        case 'id':
                            var lastPositionOfNewline = result.lastIndexOf('\n');
                            if (lastPositionOfNewline === -1) {
                                lastPositionOfNewline = 0;
                            }
                            var position = result.indexOf('.', lastPositionOfNewline);
                            if (position === -1) {
                                position = result.length;
                            }
                            var _indent = '';
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                    case 'outdent':
                                        _indent = indent.repeat(indentLevel);
                                        break;
                                    case 'indent':
                                        _indent = indent;
                                        break;
                                }
                            }
                            result = [result.slice(0, position), _indent, "#" + token.val, result.slice(position)].join('');
                            break;
                        case 'start-pipeless-text':
                            pipelessText = true;
                            result += '\n';
                            result += indent.repeat(indentLevel);
                            break;
                        case 'end-pipeless-text':
                            pipelessText = false;
                            break;
                        case 'doctype':
                            result += "doctype " + token.val;
                            break;
                        case 'dot':
                            result += '.';
                            break;
                        case 'block':
                            if (previousToken) {
                                switch (previousToken.type) {
                                    case 'newline':
                                    case 'outdent':
                                        result += indent.repeat(indentLevel);
                                        break;
                                    case 'indent':
                                        result += indent;
                                        break;
                                }
                            }
                            result += 'block ';
                            if (token.mode !== 'replace') {
                                result += token.mode;
                            }
                            result += token.val;
                            break;
                        case 'extends':
                            result += 'extends ';
                            break;
                        case 'path':
                            result += token.val;
                            break;
                        case 'start-pug-interpolation':
                            result += '#[';
                            break;
                        case 'end-pug-interpolation':
                            result += ']';
                            break;
                        case 'include':
                            if (previousToken && previousToken.type === 'indent') {
                                result += indent;
                            }
                            result += 'include';
                            break;
                        case 'filter':
                            result += ":" + token.val;
                            break;
                        default:
                            throw new Error('Unhandled token: ' + JSON.stringify(token));
                    }
                }
                logger.debug(result);
                return result;
            },
            embed: function (path, print, textToDoc, options) {
                return null;
            },
            insertPragma: function (text) {
                return "//- @prettier\n" + text;
            }
        }
    },
    options: [],
    defaultOptions: {}
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBNEY7QUFFNUYsK0JBQWlDO0FBQ2pDLG1DQUEwRDtBQUdsRCxJQUFBLHVDQUFVLENBQVU7QUFFNUIsSUFBTSxNQUFNLEdBQVcscUJBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtJQUNwQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkM7QUFJRCxTQUFTLGFBQWEsQ0FBQyxJQUFZO0lBQ2xDLElBQU0sa0JBQWtCLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRCxJQUFNLGtCQUFrQixHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLGtCQUFrQixvQkFBQSxFQUFFLGtCQUFrQixvQkFBQSxFQUFFLENBQUMsQ0FBQztJQUMvRCxJQUFJLGtCQUFrQixLQUFLLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQzNELE9BQU8sU0FBUyxDQUFDO0tBQ2pCO1NBQU0sSUFBSSxrQkFBa0IsS0FBSyxDQUFDLENBQUMsSUFBSSxrQkFBa0IsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNsRSxPQUFPLFFBQVEsQ0FBQztLQUNoQjtTQUFNLElBQUksa0JBQWtCLEtBQUssQ0FBQyxDQUFDLElBQUksa0JBQWtCLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDbEUsT0FBTyxRQUFRLENBQUM7S0FDaEI7U0FBTSxJQUFJLGtCQUFrQixHQUFHLGtCQUFrQixFQUFFO1FBQ25ELE9BQU8sUUFBUSxDQUFDO0tBQ2hCO1NBQU0sSUFBSSxrQkFB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
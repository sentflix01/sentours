"use strict";
exports.__esModule = true;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["LOG"] = 1] = "LOG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["OFF"] = 5] = "OFF";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = (function () {
    function Logger(logger, level) {
        if (logger === void 0) { logger = console; }
        if (level === void 0) { level = LogLevel.INFO; }
        this.logger = logger;
        this.level = level;
    }
    Logger.prototype.setLogLevel = function (level) {
        this.level = level;
    };
    Logger.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.message.apply(this, [LogLevel.DEBUG, message].concat(optionalParams));
    };
    Logger.prototype.log = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.message.apply(this, [LogLevel.LOG, message].concat(optionalParams));
    };
    Logger.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.message.apply(this, [LogLevel.INFO, message].concat(optionalParams));
    };
    Logger.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.message.apply(this, [LogLevel.WARN, message].concat(optionalParams));
    };
    Logger.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.message.apply(this, [LogLevel.ERROR, message].concat(optionalParams));
    };
    Logger.prototype.message = function (level, message) {
        var _a;
        var optionalParams = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            optionalParams[_i - 2] = arguments[_i];
        }
        if (this.level !== LogLevel.OFF && this.level <= level) {
            (_a = this.logger)[Logger.LOG_LEVELS[level]].apply(_a, [message].concat(optionalParams));
        }
    };
    Logger.LOG_LEVELS = [
        'debug',
        'log',
        'info',
        'warn',
        'error'
    ];
    return Logger;
}());
exports.Logger = Logger;
function createLogger(logger) {
    if (logger === void 0) { logger = console; }
    return new Logger(logger);
}
exports.createLogger = createLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQVksUUFPWDtBQVBELFdBQVksUUFBUTtJQUNuQix5Q0FBSyxDQUFBO0lBQ0wscUNBQUcsQ0FBQTtJQUNILHVDQUFJLENBQUE7SUFDSix1Q0FBSSxDQUFBO0lBQ0oseUNBQUssQ0FBQTtJQUNMLHFDQUFHLENBQUE7QUFDSixDQUFDLEVBUFcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFPbkI7QUFVRDtJQVNDLGdCQUFvQyxNQUF5QixFQUFVLEtBQStCO1FBQWxFLHVCQUFBLEVBQUEsZ0JBQXlCO1FBQVUsc0JBQUEsRUFBQSxRQUFrQixRQUFRLENBQUMsSUFBSTtRQUFsRSxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQTBCO0lBQUcsQ0FBQztJQUVuRyw0QkFBVyxHQUFsQixVQUFtQixLQUFlO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTSxzQkFBSyxHQUFaLFVBQWEsT0FBYTtRQUFFLHdCQUF3QjthQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7WUFBeEIsdUNBQXdCOztRQUNuRCxJQUFJLENBQUMsT0FBTyxPQUFaLElBQUksR0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sU0FBSyxjQUFjLEdBQUU7SUFDMUQsQ0FBQztJQUVNLG9CQUFHLEdBQVYsVUFBVyxPQUFhO1FBQUUsd0JBQXdCO2FBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtZQUF4Qix1Q0FBd0I7O1FBQ2pELElBQUksQ0FBQyxPQUFPLE9BQVosSUFBSSxHQUFTLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxTQUFLLGNBQWMsR0FBRTtJQUN4RCxDQUFDO0lBRU0scUJBQUksR0FBWCxVQUFZLE9BQWE7UUFBRSx3QkFBd0I7YUFBeEIsVUFBd0IsRUFBeEIscUJBQXdCLEVBQXhCLElBQXdCO1lBQXhCLHVDQUF3Qjs7UUFDbEQsSUFBSSxDQUFDLE9BQU8sT0FBWixJQUFJLEdBQVMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLFNBQUssY0FBYyxHQUFFO0lBQ3pELENBQUM7SUFFTSxxQkFBSSxHQUFYLFVBQVksT0FBYTtRQUFFLHdCQUF3QjthQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7WUFBeEIsdUNBQXdCOztRQUNsRCxJQUFJLENBQUMsT0FBTyxPQUFaLElBQUksR0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sU0FBSyxjQUFjLEdBQUU7SUFDekQsQ0FBQztJQUVNLHNCQUFLLEdBQVosVUFBYSxPQUFhO1FBQUUsd0JBQXdCO2FBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtZQUF4Qix1Q0FBd0I7O1FBQ25ELElBQUksQ0FBQyxPQUFPLE9BQVosSUFBSSxHQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxTQUFLLGNBQWMsR0FBRTtJQUMxRCxDQUFDO0lBRU8sd0JBQU8sR0FBZixVQUFnQixLQUFlLEVBQUUsT0FBYTs7UUFBRSx3QkFBd0I7YUFBeEIsVUFBd0IsRUFBeEIscUJBQXdCLEVBQXhCLElBQXdCO1lBQXhCLHVDQUF3Qjs7UUFDdkUsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUU7WUFDdkQsQ0FBQSxLQUFBLElBQUksQ0FBQyxNQUFNLENBQUEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQWUsQ0FBQyxDQUFDLFlBQUMsT0FBTyxTQUFLLGNBQWMsR0FBRTtTQUM1RTtJQUNGLENBQUM7SUF0Q3VCLGlCQUFVLEdBQThDO1FBQy9FLE9BQU87UUFDUCxLQUFLO1FBQ0wsTUFBTTtRQUNOLE1BQU07UUFDTixPQUFPO0tBQ1AsQ0FBQztJQWlDSCxhQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7QUF4Q1ksd0JBQU07QUEwQ25CLFNBQWdCLFlBQVksQ0FBQyxNQUF5QjtJQUF6Qix1QkFBQSxFQUFBLGdCQUF5QjtJQUNyRCxPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFGRCxvQ0FFQyJ9